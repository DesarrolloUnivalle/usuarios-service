name: Deploy Usuarios Service

on:
  push:
    branches:
      - main
      - test-workflow

env:
  SERVICE_NAME: usuarios-service
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/usuarios-service
  K8S_DIR: kubernetes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test
        run: |
          mvn clean package
          mvn test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:latest

      # ========================
      # === Despliegue en GKE ===
      # ========================
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: gcp-despliegue-desarrollo 
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials cluster-desarrollo --zone us-central1-c --project gcp-despliegue-desarrollo

      - name: Deploy to GKE
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=120s

      - name: Debug deployment failure
        if: failure()
        run: |
          echo "==== PODS ===="
          kubectl get pods -o wide
          
          echo "==== DESCRIBE POD ===="
          kubectl describe pod $(kubectl get pod -l app=${{ env.SERVICE_NAME }} -o jsonpath="{.items[0].metadata.name}")
          
          echo "==== LOGS ===="
          kubectl logs $(kubectl get pod -l app=${{ env.SERVICE_NAME }} -o jsonpath="{.items[0].metadata.name}")

      # ==================================
      # === Despliegue LOCAL con Minikube ===
      # ==================================
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      - name: Start Minikube
        run: |
          minikube start --driver=docker
          minikube addons enable ingress
          minikube addons enable metrics-server

      - name: Deploy to Minikube
        run: |
          eval $(minikube -p minikube docker-env)
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          kubectl get pods
          kubectl describe pods
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=120s
      - name: Cleanup Minikube
        if: always()
        run: |
          minikube stop
          minikube delete
